/**
 * Project by Riya Jaitly, Harshita Bhardwaj, and Shania Dhanaraj
 * FINAL JAVA Code
 */
package com.example.tictactoegame;
import androidx.appcompat.app.AppCompatActivity;
import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.example.tictactoegame.R;
public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    private TextView playerOneScore, playerTwoScore, playerStatus; private Button [] buttons = new Button[9];
    private Button resetGame;
    private int playerOneScoreCount, playerTwoScoreCount, roundCount; boolean activePlayer;
    /**
     * p1 => 0 (X)
     * p2 => 1 (O)
     * empty button => 2
     */
    int[] gameState = {2, 2, 2, 2, 2, 2, 2, 2, 2};

    // combos that create a win
    int [][] winningPositions = {
            {0, 1, 2}, {3, 4, 5}, {6, 7, 8}, // row combos
            {0, 3, 6}, {1, 4, 7}, {2, 5, 8}, // columns
            {0, 4, 8}, {2, 4, 6} //crosses
    };
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //initializing all the variables
        playerOneScore = (TextView) findViewById(R.id.playerOneScore); // please make sure to use the same id names
        playerTwoScore = (TextView) findViewById(R.id.playerTwoScore);
        playerStatus = (TextView) findViewById(R.id.playerStatus);
        resetGame = (Button) findViewById(R.id.resetGame);

        for(int i = 0; i < buttons.length; i++) {
            // cant just use this string in the find view by ide function because it doesn't accept a string
            String btnID = "btn_" + i;

            //this part of code is to get a button by an id that we determine using the string above
            int resourceID = getResources().getIdentifier(btnID, "id",
                    getPackageName());
            buttons[i] = (Button) findViewById(resourceID);

            //what to do when the button is pressed
            buttons[i].setOnClickListener(this);
        }
        roundCount = 0;

        //scores of players 1 and 2
        playerOneScoreCount = 0;
        playerTwoScoreCount = 0;

        // true = player 1 turn
        // false = player 2 turn
        activePlayer = true;
    }


    //what happens when a button is clicked
    @Override
    public void onClick(View v) {
        // making it so if a button has been pressed it's value can't be changed
        // if the button is not empty (it has not already been played)
        if(!((Button)v).getText().toString().equals(""))
        {
            return; // nothing should change
        }

        // identifying which button has been pressed and changing its value based on the player's turn
        //retrieve the id of the button pressed
        String btnID = v.getResources().getResourceEntryName(v.getId());
        int gameStatePointer = Integer.parseInt(btnID.substring(btnID.length() - 1)); //get the last character of the id (this will be a number)

        //check which player is playing and set the button to the right symbol
        if(activePlayer) {
            ((Button) v).setText("X");
            ((Button) v).setTextColor(Color.parseColor("#E1341E")); //red
            gameState[gameStatePointer] = 0; // change the array for game state to show this button has been played
        } else {
            ((Button) v).setText("O");
            ((Button) v).setTextColor(Color.parseColor("#1ECBE1")); //blue
            gameState[gameStatePointer] = 1; // change the array for game state to show this button has been played
        }
        roundCount++;

        int t = Toast.LENGTH_SHORT; // time for the alert
        //check if a player won
        System.out.println("Checking winner");
        if(checkWinner()){
            //if player 1 won update their score and restart
            if(activePlayer){
                playerOneScoreCount++;
                updatePlayerScore();
                Toast.makeText(this, "✨Player One Won!✨", t).show();
                playAgain();
            }else {
                //if player 2 won update their score and restart the game
                playerTwoScoreCount++;
                updatePlayerScore();
                Toast.makeText(this, "✨Player Two Won!✨", t).show();
                playAgain();
            }
        }else if(roundCount == 9){ // if all the buttons have been played there is a tie
            playAgain();
            Toast.makeText(this, "No Winner!", t).show();
        }
        else{
            activePlayer = !activePlayer; //if there is no winner change the player's turn
        }


        // set the player status bar to say who is winning
        // status bar will show nothing is there is a tie
        if(playerOneScoreCount > playerTwoScoreCount)
            playerStatus.setText("Player One is Winning!");
        else if(playerTwoScoreCount > playerOneScoreCount)
            playerStatus.setText("Player Two is Winning!");
        else
            playerStatus.setText("");

        // resetting the game when the reset button is clicked
        resetGame.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                playAgain();
                playerOneScoreCount = 0;
                playerTwoScoreCount = 0;
                playerStatus.setText("");
                updatePlayerScore();
            }
        });
    }

    //check if there is a winner
    public boolean checkWinner(){
        boolean winnerResult = false;
        for(int [] winningPosition : winningPositions){
            
            // if any of the winning positions given in the array match
            // and the buttons don't have a value of 2 there is a winner
            if (gameState[winningPosition[0]] == gameState[winningPosition[1]] &&
                    gameState[winningPosition[1]] == gameState[winningPosition[2]] &&
                    gameState[winningPosition[0]] != 2) {
                winnerResult = true;
            }
        }
        return winnerResult;
    }

    //method to update the player score
    public void updatePlayerScore(){
        playerOneScore.setText(Integer.toString(playerOneScoreCount));
        playerTwoScore.setText(Integer.toString(playerTwoScoreCount));
    }

    //method to restart the game
    public void playAgain(){
        roundCount = 0;
        activePlayer = true;
        for(int i = 0; i < buttons.length; i++){
            gameState[i] = 2;
            buttons[i].setText("");
        }
    }
}
